name: C++ CI

on:
  pull_request

jobs:
  formatting-check:
    name: Formatting check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dos2unix
        run: sudo apt-get install -y dos2unix

      - name: Set execute permissions for check-lines.sh
        run: chmod +x ci-scripts/check-lines.sh

      - name: Check line breaks
        run: |
          pushd $GITHUB_WORKSPACE
          ci-scripts/check-lines.sh
          popd

      - name: Run clang-format style check
        uses: jidicula/clang-format-action@v4.11.0
        with:
          clang-format-version: '17'
          check-path: 'src tests'
          exclude-regex: '.*itti_structs.*'


  test:
    needs: formatting-check
    name: Tests in ${{ matrix.build_type }} with ${{ matrix.compiler }}

    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, SanitizedDebug]
        compiler: [gcc-13]

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GCC 13
        if: matrix.compiler == 'gcc-13'
        run: |
          sudo add-apt-repository ppa:netext/paczki
          sudo apt-get update
          sudo apt-get install -y gcc-13 g++-13
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100

      - name: Set up Vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git ${{ github.workspace }}/vcpkg
          ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh

      - name: Configure CMake
        run: |
          ${{ github.workspace }}/vcpkg/vcpkg install gtest
          ${{ github.workspace }}/vcpkg/vcpkg install rapidjson
          cmake -B build -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Build project
        run: cmake --build build --target tests -- -j 2

      - name: Run tests
        run: |
          if [[ ${{ matrix.build_type }} == "SanitizedDebug" ]]; then
            ASAN_OPTIONS=alloc_dealloc_mismatch=0 ./build/tests
          else
            ./build/tests
          fi
